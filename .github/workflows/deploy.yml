name: 🌾 Deploy TelAgri Bank Dashboard

# This workflow:
# - On PULL REQUEST: Only runs build, lint, test, and security scan (no deployment)
# - On PUSH (merge): Runs full pipeline including deployment to AWS  
# - On MANUAL: Allows manual deployment to any environment

on:
  push:
    branches:
      - main
      - develop 
      - staging
  pull_request:
    branches:
      - main
      - develop
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and test the frontend
  build:
    name: 🏗️ Build PWA
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build PWA
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Determine deployment environment
  environment:
    name: 🎯 Determine Environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.env.outputs.env }}
      domain: ${{ steps.env.outputs.domain }}
    
    steps:
      - name: 🎯 Set environment
        id: env
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENV="prod"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            ENV="staging"
          else
            ENV="dev"
          fi
          
          echo "env=${ENV}" >> $GITHUB_OUTPUT
          
          case ${ENV} in
            prod)
              echo "domain=dashboard.telagri.com" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "domain=bank-staging.telagri.com" >> $GITHUB_OUTPUT
              ;;
            dev)
              echo "domain=bank-dev.telagri.com" >> $GITHUB_OUTPUT
              ;;
          esac
          
          echo "🎯 Deploying to: ${ENV}"
          echo "🌐 Domain: $(cat $GITHUB_OUTPUT | grep domain | cut -d= -f2)"

  # Run database migrations
  migrate:
    name: 🗄️ Run DB Migrations
    runs-on: ubuntu-latest
    needs: [build, environment]
    environment: ${{ needs.environment.outputs.env }}
    # Only run migrations on push events (when PRs are merged), not on pull_request events
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: 🔐 Authenticate with Supabase
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "🔐 Linking to Supabase project..."
          supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: 🗄️ Run database migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "🗄️ Running database migrations..."
          supabase db push
          echo "✅ Migrations completed successfully"

      - name: 🔍 Verify migration status
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "🔍 Checking migration status..."
          supabase migration list --linked

  # Deploy infrastructure with CDK
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, environment, migrate]
    environment: ${{ needs.environment.outputs.env }}
    # Only deploy on push events (when PRs are merged), not on pull_request events
    if: github.event_name != 'pull_request'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            cdk/package-lock.json

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚙️ Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: 📦 Install CDK dependencies
        working-directory: cdk
        run: npm ci

      - name: 🏗️ Build CDK
        working-directory: cdk
        run: npm run build

      - name: 🔍 CDK Diff
        working-directory: cdk
        env:
          ENVIRONMENT: ${{ needs.environment.outputs.env }}
          DOMAIN_NAME: ${{ needs.environment.outputs.domain }}
          CERTIFICATE_ARN: ${{ vars.CERTIFICATE_ARN }}
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        run: |
          echo "🔍 Showing infrastructure changes..."
          npm run diff || true

      - name: 🚀 Deploy CDK Stack
        working-directory: cdk
        env:
          ENVIRONMENT: ${{ needs.environment.outputs.env }}
          DOMAIN_NAME: ${{ needs.environment.outputs.domain }}
          CERTIFICATE_ARN: ${{ vars.CERTIFICATE_ARN }}
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
        run: |
          echo "🚀 Deploying TelAgri Bank Dashboard to ${{ needs.environment.outputs.env }}..."
          npm run deploy

      - name: 📋 Get Stack Outputs
        working-directory: cdk
        env:
          ENVIRONMENT: ${{ needs.environment.outputs.env }}
        run: |
          echo "📋 Stack Outputs:"
          aws cloudformation describe-stacks \
            --stack-name "TelAgri-Bank-Dashboard-${{ needs.environment.outputs.env }}" \
            --query 'Stacks[0].Outputs' \
            --output table || true

      - name: ✅ Deployment Success
        run: |
          echo "🎉 TelAgri Bank Dashboard successfully deployed!"
          echo "🌐 URL: https://${{ needs.environment.outputs.domain }}"
          echo "🔧 Environment: ${{ needs.environment.outputs.env }}"
          echo "📊 Build: ${{ github.sha }}"

  # Security scan (runs on all events)
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    # Run security scan on all PRs and main branch pushes
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-results.txt'

      - name: 📊 Display security scan results
        if: always()
        run: |
          echo "🔒 Security Scan Results:"
          echo "========================"
          if [ -f trivy-results.txt ]; then
            cat trivy-results.txt
          else
            echo "✅ No vulnerabilities detected or scan output not generated"
          fi
          echo "========================"

  # Notification (only for deployments)
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [migrate, deploy, environment]
    # Only notify on deployment attempts (not PRs), and always run regardless of deploy success/failure
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: 📢 Deployment notification
        run: |
          echo "📊 Deployment Summary:"
          echo "====================="
          echo "🗄️ Migrations: ${{ needs.migrate.result }}"
          echo "🚀 Deployment: ${{ needs.deploy.result }}"
          echo "🌐 Environment: ${{ needs.environment.outputs.env }}"
          echo ""
          
          if [ "${{ needs.migrate.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ TelAgri Bank Dashboard deployment fully successful!"
            echo "🔗 URL: https://${{ needs.environment.outputs.domain }}"
          elif [ "${{ needs.migrate.result }}" == "failure" ]; then
            echo "❌ Database migration failed!"
            echo "🚨 Deployment was skipped due to migration failure"
            echo "📋 Check migration logs for details"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "❌ AWS deployment failed!"
            echo "✅ Database migrations completed successfully"
            echo "📋 Check deployment logs for details"
          else
            echo "❌ Deployment pipeline failed!"
            echo "📋 Check the logs for details"
          fi 